<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:g="urn:import:com.google.gwt.user.client.ui"
	xmlns:b="urn:import:com.github.gwtbootstrap.client.ui">
	<ui:style>

		body {
			background-color: #eee;
		}

		.button {
			background-image: none !important;
   		    background-repeat: no-repeat !important;
			text-shadow: none !important;
			font-size: 14px;
			filter: none;
			border: 1px solid grey;
			padding-top: 3.5%;
			padding-bottom: 3.5%;
			min-width: 30%;
			background-color:#333;
			margin: .5em;
			margin-top:3em;
			color: #fed130;
		}

		.button:hover {
			background-color: #444;
			color: white;
		}
		.columns {
			padding:0.2em;
		}
		.title {
			font-family: Consolas, arial, verdana, san-serif;
			text-decoration: none;
			padding: 0px;
			margin: 0px;
			background-color:inherit;
		}
		.content {
			text-align:center;
			margin-left: auto;
			margin-right: auto;
			top:20px !important;
			width:100%
			background-color: #eee;
		}
		.text {
			font-size: 18px;
			font-family: Consolas, arial, verdana, san-serif;
			color:black;
			background-color: inherit;
			width:60%;
			margin-left:auto;
			margin-right:auto;
			margin-top:1em;
		}
		.icon {
			font-size: 40px;
			color: #fed130;
		}
		.strip {
			background-color: #222;
			width: 100%;
			height: 18em;
			margin-left: auto;
			margin-right:auto;
			color:white;
			padding: 0px;
			border-radius: 0px;
		}
		.welcomeText {
			background-color:inherit;
			white-space: normal;
			line-height: 100%;
			color:white;
			font-size: x-large;
			padding-top: .5vw;
			width: 100%;
			background-color:inherit;
		}

		.circular {
			width: 13%;
			margin-top: .3vw;
			border-radius: 100%;
			background-repeat: no-repeat;
			border: .3vw solid #fed130;
		}

		.login {
			margin-top: 40px;
			margin-left: auto;
			margin-right: auto;
			padding-top: 20px;
			background-color: #222;
			width: 30%;
			padding-bottom: 20px;
			border: 1px solid grey;
			border-radius: 6px;
			-moz-border-radius: 6px;
			-webkit-border-radius: 6px;
		}

		.textBox {
			width: 70%;
		}

		.aboutContain {
			padding-top: 80px;
			margin-bottom: 30px;
			font-weight: 200;
			line-height: 30px;
			text-align: center;
			color: inherit;
			background-color: #333;
			border-radius: 6px;
		}

		.about {
			text-align: left;
			color: white;
			width: 75vw;
			margin: 0 auto;
		}

		.aboutChild {
			text-align:left;
			color: white;
			width: 94%;
			margin: 0 auto;
		}

		.aboutIcon {
			font-size: 6px;
			vertical-align: middle;
			color: #34495e;
		}

		.makeAccount1 {
			min-width: 16%;
			margin: 2px;
		}

		.makeAccount2 {
			min-width: 40%;
			margin: 2px;
		}
                                                                                                       
}  

	</ui:style>

	<b:Container addStyleNames="{style.content}">
	    <b:Hero addStyleNames="{style.strip}">
	        <g:Image url="TRIANGLEDAWG.png" addStyleNames="{style.circular}" />
	        <b:Heading size="1" addStyleNames="{style.title}">Welcome</b:Heading>
	        <b:Paragraph><b:Label addStyleNames="{style.welcomeText}">This is WAGS, short for "Web Automated Grading System"</b:Label></b:Paragraph>
	        <b:Paragraph><b:Label addStyleNames="{style.welcomeText}" ui:field='loginText'>Please enter your credentials below to log in.</b:Label></b:Paragraph>
	       
	    </b:Hero>
	    <b:Row>
			<b:Button size="LARGE" addStyleNames="{style.button}" ui:field='problemsButton'>Assigned Problems</b:Button>
		</b:Row>
		<b:Row ui:field="loginScreen" addStyleNames="{style.login}">
		    <b:Column size="3">
			<b:Row>
	        	<b:TextBox placeholder="username" ui:field="username" addStyleNames="{style.textBox}"/>
			</b:Row>
	    	<b:Row>
			    <b:PasswordTextBox placeholder="password" ui:field="password" addStyleNames="{style.textBox}"/>
			</b:Row>
			</b:Column>
			<b:Column size="3">
	        <b:Row>
	            <b:Button addStyleNames="btn, {style.makeAccount1}" ui:field="loginButton">Login</b:Button>
	            <b:Button addStyleNames="btn, {style.makeAccount1}" ui:field="guestLoginButton">Guest</b:Button>
	        </b:Row>
	        <b:Row>
	            <b:Button addStyleNames="btn, {style.makeAccount2}" ui:field="makeAccount">Request an Account</b:Button>
	        </b:Row>
	        </b:Column>
	     </b:Row>
		<b:Row addStyleNames="{style.aboutContain}">
		      <b:Accordion>
		          <b:AccordionGroup addStyleNames="{style.about}" heading="What features does WAGS provide?" defaultOpen="false" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		              <b:Accordion>
		          		<b:AccordionGroup addStyleNames="{style.aboutChild}" heading="Student Activities" defaultOpen="false" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		            		<b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Select a tab to complete from the currently visible microlabs</b:Paragraph>
		            		<b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> View results on labs currently being attempted or already completed</b:Paragraph>
		            		<b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Review labs already completed, typically done in preparation for an exam</b:Paragraph>
		           		</b:AccordionGroup>
		        	<b:AccordionGroup heading="Instructor Activities" defaultOpen="false" addStyleNames="{style.aboutChild}" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Enroll students into the system</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Activate each lab session</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Monitor completion of lab activities; this can be done on a real-time basis during class</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> View the number of attempts made by each student</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Download performance in a CSV format</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Allow students to review labs already completed</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Modify existing code magnet labs or create new labs</b:Paragraph>
		        	</b:AccordionGroup>
		        	</b:Accordion>
		        </b:AccordionGroup>
		        <b:AccordionGroup addStyleNames="{style.about}" heading="What labs are currently available?" defaultOpen="false" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		            <b:Accordion>
		           		<b:AccordionGroup heading="Logical Microlabs" defaultOpen="false" addStyleNames="{style.aboutChild}" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Binary Trees: Tree traversals (pre, in, post, level); insert into BST; build BST from postorder; build binary tree from pre/inorder</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Graphs: MST Kruskal, MST Prim</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Max Heaps: Insertion; Deletion, Build Heap</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Min Heaps: Insertion; Deletion, Build Heap</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Sorting: Heap Sort, Radix Sort</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Hashing: Linear probing; quadratic probing</b:Paragraph>
		        		</b:AccordionGroup>
		        		<b:AccordionGroup heading="Standard Code Magnet Labs" defaultOpen="false" addStyleNames="{style.aboutChild}" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Class Operations: five labs</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Control Structures: If: four labs; While: four labs; For: four labs</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Arrays and ArrayLists: Arrays: five labs; ArrayLists: three labs</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Binary Trees: preorder traversal, inorder traversal, postorder traversal, insert into BST; build BST from postorder; build binary tree from pre/inorder</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Max Heaps: Insertion; Deletion, Build heap</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Searching: Iterative Linear Search; Iterative Binary Search, Recursive Linear Search; Recursive Binary Search</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> HashMaps: Create and insert, Remove, Reverse Lookup, Merge Maps</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Sorting: Iterative Selection Sort; Recursive Insertion Sort; Iterative Insertion Sort, Radix Sort: seven labs, Quicksort, Bubblesort, NegPosPartition, NegPosPartition checker</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Strings: Count Occurrences; Palindrome; Word Count, Double Word, Double Letter</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Lists: Big Integer: Add, Big Integer: digit multiply, Big Integer: Multiply</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Stacks and Queues: Postfix Evaluation; Balance Checker; Josephus Algorithm</b:Paragraph>
		        		</b:AccordionGroup>
		        		<b:AccordionGroup heading="Prolog Code Magnet Labs" defaultOpen="false" addStyleNames="{style.aboutChild}" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> List Operations: deleteFirstOccurrence, myFlatten, myReverse, replace, removeAdjacentDuplicates, sublist, myAppend, deleteAll, myLength</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Numeric Operations: convert, allCombinations, primeFactors</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Tree Operations: buildBST, countLeaves, Preorder Traversal, Inorder Traversal</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Other: Family Tree: four labs; Graphs: two labs, N Queens</b:Paragraph>
		        		</b:AccordionGroup>
		        		<b:AccordionGroup heading="Advanced Code Magnet Labs" defaultOpen="false" addStyleNames="{style.aboutChild}" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Control Structures: While: Log2; For: sumGeometricSeries</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Searching and Sorting: Recursive Binary Search, Recursive Insertion Sort</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Binary Trees: insert into BST</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Max Heaps: Insertion; Deletion</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Lists: Big Integer: Add, BigInteger: digit multiply, Big Integer: Multiply</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Stacks and Queues: Josephus Algorithm, Stacks: Balance Checker</b:Paragraph>
		        		</b:AccordionGroup>
		        	</b:Accordion>
		        	</b:AccordionGroup>
		        	<b:AccordionGroup heading="What are Logical Microlabs?" defaultOpen="false" addStyleNames="{style.about}" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Students solve a conceptual problem by arranging icons on a screen, such as building a binary tree, or by selecting icons in a correct sequence when finding a minimum spanning tree</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Typically there are three or four variations for each topic, each with different data</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Students can attempt the same lab multiple times until they discover a solution</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> If not completed during class, students can be given additional time to complete outside of class</b:Paragraph>
		           </b:AccordionGroup>
		           <b:AccordionGroup heading="What are Code Magnet Microlabs?" defaultOpen="false" addStyleNames="{style.about}" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Students construct a method by arranging given code magnets inside the method</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Magnets can be nested inside control structure magnets</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> The languages currently supported are Java, C/C++, and Prolog</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> The student code is compiled and subjected to unit testing; feedback guides the student toward a correct solution; multiple attempts are allowed</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> If not completed during class, students can be given additional time to complete ouside of class</b:Paragraph>
		        	</b:AccordionGroup>
		        	<b:AccordionGroup heading="What are Advanced Code Magnets?" defaultOpen="false" addStyleNames="{style.about}" icon="CHEVRON_DOWN" iconPosition="RIGHT">
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Students first build some of the needed magnets</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Magnet builders may exist for while, if, and for control structures and assignment and return statements</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> The magnet itself has pull down menus where the student makes a selection from the choices</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> All statements of the same type share a single magnet builder for that statement</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> The developer sets the maximum number of magnets allowed for each type</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> Other magnets may be given as standard magnets; both types of magnets are then used to build the desired method or methods</b:Paragraph>
		        		    <b:Paragraph><b:Icon type="CIRCLE" addStyleNames="{style.aboutIcon}"></b:Icon> These labs are substantially more challenging and typically are completed outside of lecture</b:Paragraph>
		        	</b:AccordionGroup>
		       </b:Accordion>
		</b:Row>
		
	</b:Container>
	
	
</ui:UiBinder> 